[["plotly.html", "Chapter 5 Interactive Visualization 5.1 An Introduction 5.2 Creating Plotly Objects 5.3 Scatterplots and Line Plots 5.4 Pie Charts 5.5 Animation 5.6 Saving HTML 5.7 Exercises", " Chapter 5 Interactive Visualization 5.1 An Introduction As the volume and complexity of infectious disease data increases, public health professionals must synthesize highly disparate data to facilitate communication with the public and inform decisions regarding measures to protect the public’s health. Interactive data visualization allows users the freedom to explore data fully. Here are some key advantages of using interactive data visualization software: Hovering over any data point to see the data behind it; Identifying causes and trends more quickly; Adding multiple highlights and change view subsets of the data by editing options below each graph; Auto-refreshing your visuals to show the most recent data. So far, your primary tool for creating these data visualizations has been “ggplots”. In the past few years, interactive tools for visualization of disease outbreaks has been improving markedly. In this chapter, we will introduce the R plotly package, which allows you to make more professional and interactive graphics, share them on websites, and customize them as you wish. Figure 5.1: A typical data science process. Plotly is an R package for creating interactive, publication-quality graphs. Some of the charts you can do are Basic charts, Statistical charts, Scientific charts, Financial charts, Maps, 3D charts, Subplots, Transforms, Animations. Plotly is built on top of visualization library D3.js, HTML, and CSS. Here are some benefits of using plotly. Plotly is compatible with several languages/ tools: R, Python, MATLAB, Perl, Julia, Arduino. Using plotly, we can easily share interactive plots online with multiple people. Plotly can also be used by people with no technical background for creating interactive plots by uploading the data and using plotly GUI. Plotly is compatible with ggplots in R and Python. Plotly allows embedding interactive plots in websites using iframes or HTML. The syntax for creating interactive plots using plotly is straightforward as well. Suggested references: https://plotly-r.com/overview.html https://plot.ly/r https://plot.ly/r/reference/ Read the book Sievert (2020): Interactive web-based data visualization with R, plotly, and shiny. Read the Cheatsheet from https://images.plot.ly/. Before we begin, please get ready by installing the plotly R package by any of the following methods. Install Plotly You can download the package by using written code below: install.packages(&quot;plotly&quot;) Install from Github Alternatively, you can install the latest development version of plotly from GitHub via the devtools R package: devtools::install_github(&quot;ropensci/plotly&quot;) 5.2 Creating Plotly Objects To create a plotly object, you start with a call to plotly() and pass the data. Next, you decide which graphical representation you want to use: points, lines, bar charts, etc. Then, you customize labels, colors, titles, fonts, etc. Here is a typical code structure: plot_ly(data) %&gt;% add_* (x, y, type, mode, color, size) %&gt;% layout(title, xaxis = list(title, titlefont), yaxis = list(title, titlefont)) In the above code, layout() is used to add/modify part(s) of the graph’s layout. There are a family of add_*() functions, such as add_histogram(), add_trace(), add_lines(), add_pie(), that you can define how to render data into geometric objects. These functions add a graphical layer to a plot. A layer can be considered as a group of graphical elements that can be sufficiently described using only five components: data, aesthetic mappings (e.g., assigning clarity to color), a geometric representation (e.g., rectangles, circles, etc.), statistical transformations (e.g., sum, mean, etc.), and positional adjustments (e.g., dodge, stack, etc.). Here are some arguments that are typically used in the add_*() function: x: values for x-axis; y: values for y-axis; type: to specify the plot that you want to create like “histogram”, “bar”, “scatter”, etc. mode: format in which you want data to be represented in the plot, and possible values are “markers”, “lines, “points”; color: values of same length as x, y and z that represents the color of data points or lines in plot. size: values for same length as x, y and z that represents the size of data points or lines in plot. 5.2.1 Using plot_ly() to create a plotly object Before you try this example, please make sure to install plotly, dplyr and lubridate packages. The lubridate is an R package of choice for working with variables that store dates' values. library(lubridate) library(dplyr) library(plotly) The county-level dataset is used to create the bar chart below. You can download the county.top10 dataset from the slid R package. This data contains the top 10 counties with the largest number of infected cases on 2020/12/11. library(devtools) install_github(&#39;covid19-dashboard-us/slid&#39;) library(slid) data(county.top10) county.top10 ## ID County State Infection Death ## 176 6037 LosAngeles California 501635 8199 ## 577 17031 Cook Illinois 346004 7282 ## 334 12086 Miami-Dade Florida 253403 3959 ## 75 4013 Maricopa Arizona 245671 4299 ## 2586 48201 Harris Texas 204850 3128 ## 2542 48113 Dallas Texas 156225 1751 ## 1715 32003 Clark Nevada 137100 1962 ## 193 6071 SanBernardino California 120186 1209 ## 297 12011 Broward Florida 118512 1728 ## 2705 48439 Tarrant Texas 116931 1158 Now let's use the plot_ly() to initialize a plotly object. plot_ly(data = county.top10) %&gt;% add_trace(y = ~Infection, x = ~County, type = &#39;bar&#39;, name = &#39;Infection&#39;) Figure 5.2: Bar chart of the infected count. Here are a few things that you can try in the interactive plots: Hovering your mouse over the plot to view associated attributes; Selecting a particular region on the plot using your mouse to zoom; Resetting the axis; Zooming in and zooming out. Next, you can use layout() to modify the layout of a plotly visualization and specify more complex plot arrangements. plot_ly(data = county.top10) %&gt;% add_trace(y = ~Infection, x = ~County, type = &#39;bar&#39;, name = &#39;Infection&#39;) %&gt;% layout(xaxis = list(title = &quot;County&quot;), yaxis = list(title =&quot;Infected Count&quot;), title = &quot;Total Infected Cases on 2020-12-11&quot;) Figure 5.3: Modified bargraph of the infected count. You can also add text labels and annotations to a plotly project in R using add_text(). plot_ly(data = county.top10) %&gt;% add_bars(y = ~Infection, x = ~County, name = &#39;Infection&#39;) %&gt;% add_text( text = ~scales::comma(Infection), y = ~Infection, x = ~County, textposition = &quot;top middle&quot;, showlegend = FALSE, cliponaxis = FALSE ) %&gt;% add_bars(y = ~Death, x = ~County, name = &#39;Death&#39;, color = I(&quot;red&quot;)) %&gt;% add_text( text = ~Death, y = ~Death, x = ~County, textposition = &quot;top middle&quot;, showlegend = FALSE, cliponaxis = FALSE ) %&gt;% layout(xaxis = list(title = &quot;County&quot;), yaxis = list(title = &quot;Number of Cases&quot;), title = &quot;Total Infected/Death Cases on 2020-12-11&quot;) Figure 5.4: Bargraph of the infected count and death count. 5.2.2 Use dplyr verbs to modify data To visualize the states that the counties with the most infected cases locate in, we can use the dplyr verbs to modify data and calculate counts and use add_bars to add a new bar chart. county.top10 %&gt;% group_by(State) %&gt;% summarise(n = n()) %&gt;% plot_ly() %&gt;% add_bars(x = ~State, y = ~n) Figure 5.5: Bargraph of the infected count by adding bars. Next, suppose we are interested in the distribution of the logarithm of the daily new infected cases from 2020-11-12 to 2020-12-11 from all the states in the US. We can use the state.long data in the slid R package, and plot the histogram of log(daily new infected cases) using add_histogram. # Prepare the daily new Infected for each state in the period # from 2020-11-12 to 2020-12-11 slid::state.long %&gt;% dplyr::filter(DATE &lt;= &#39;2020-12-11&#39; &amp; DATE &gt; &#39;2020-11-11&#39;) %&gt;% group_by(State) %&gt;% # Group by State # Create daily new from cum. Infected count mutate(Y.Infected = c(Infected[-length(Infected)] - Infected[-1], 0)) %&gt;% plot_ly() %&gt;% add_histogram(x = ~log(Y.Infected+1)) Figure 5.6: Histogram of the log(daily new infected cases). 5.2.3 Using ggplotly() to create a plotly object The ggplotly() function from the plotly package has the ability to translate ggplot2 to plotly. This functionality can be really helpful for quickly adding interactivity to your existing ggplot2 workflow. We consider the state.long dataset, which includes the variables, cumulative infected cases (Infected). Chapter 4 shows how to draw a simple scatterplot using the reported data on December 11, 2020. Figure 5.7 shows a translated scatterplot from ggplot2 to plotly. df &lt;- slid::state.long %&gt;% dplyr::filter(DATE == &#39;2020-12-11&#39;) p &lt;- ggplot(df, aes(log(Infected), log(Death))) + geom_point() + geom_point(aes(color = Region)) # Translate ggplot2 to plotly ggplotly(p) Figure 5.7: A translated scatterplot from ggplot2 to to plotly. 5.3 Scatterplots and Line Plots The plot_ly() function initiates an object where one or multiple traces can be added to it via functions add_trace() or add_*(). In add_trace(), the layer's type can be specified using the type argument. For example, some most commonly used types include 'scatter', 'bar', 'box', 'histogram', 'heatmap', etc. Some add_*() functions are specific cases of a trace type. If the type is not specified when adding a layer, a sensible default will be set. We focus on type = 'scatter', which works well in displaying lines and points, such as the time series of infected cases or the number of people vaccinated during the pandemic. 5.3.1 Make a scatterplot We use the state.long data to draw a basic scatterplot with log(Death) vs log(Infected). library(slid) data(state.long) plot_ly(data = state.long %&gt;% filter(DATE == as.Date(&#39;2020-12-11&#39;))) %&gt;% add_trace(x = ~log(Infected), y = ~log(Death), text = ~State, type = &#39;scatter&#39;, mode = &#39;markers&#39;) 5.3.2 Markers We now describe how to change the point colors, and shapes of markers generated using plotly. color: values mapped to relevant fill-color’ attribute(s); I(): avoid mapping a data value to colors and specify the color manually (e.g., color = I(&quot;red&quot;)). variable: numeric: generate one trace with a filled color determined by the variable value and a color bar as a guide; factor: generate multiple traces with different colors, one for each factor level; symbol: can be specified similarly as color by factor value; I() to set a fixed color. size: for scatterplots, unless otherwise specified via the sizemode, the size argument controls the area of markers and must be a numeric variable. The size argument controls the minimum and maximum size of circles in pixels. Below, we customize the scatterplot and change the size and color of the markers. data(state.long) plot_ly(data = state.long %&gt;% filter(DATE == as.Date(&#39;2020-12-11&#39;))) %&gt;% add_trace(x = ~log(Infected), y = ~log(Death), text = ~State, type = &#39;scatter&#39;, mode = &#39;markers&#39;, # change the size and color of the markers size = ~pop, color = ~Region, marker = list(opacity = 0.5, symbol = &#39;circle&#39;, sizemode = &#39;diameter&#39;)) 5.3.3 A single time series plot We draw a time series of the cumulative infected count for Cook county, IL. # Load data library(slid) data(county.top10.long) # Start plotly from here plot_ly() %&gt;% # add Cook County’s time series using mode: lines+markers add_trace(data = county.top10.long %&gt;% filter(wday(Date) == 1 &amp; type == &#39;Observed&#39; &amp; County == &#39;Cook&#39;), x = ~Date, y = ~Count, type = &#39;scatter&#39;, mode = &#39;lines+markers&#39;, showlegend = TRUE, name = &#39;mode:lines+markers&#39;, text = &#39;Cook, Illinois&#39;) Figure 5.8: Time series plot of the cumulative infected count for Cook County, IL. 5.3.4 Hover text and template You can add summary statistics or additional information to your plot in the form of tooltips that appear when viewers hover their mouse over areas of your project. There are two main approaches to controlling the tooltip: hoverinfo and hovertemplate. The default value of hoverinfo is x+y+text+name, meaning that plotly.js will use the relevant values of x, y, text, and name to populate the tooltip text. # Start plotly from here plot_ly() %&gt;% # add Cook County’s time series using mode: lines+markers add_trace(data = county.top10.long %&gt;% filter(wday(Date) == 1 &amp; type == &#39;Observed&#39; &amp; County == &#39;Cook&#39;), x = ~Date, y = ~Count, type = &#39;scatter&#39;, mode = &#39;lines+markers&#39;, showlegend = TRUE, name = &#39;mode:lines+markers&#39;, text = &#39;Cook, Illinois&#39;, hoverinfo = &quot;x+y+text&quot;) To customize the tooltip on your plot, you can use hovertemplate, a template string used to render the information that appears on the hover box. See Chapter 25 of Sievert (2020) for more details on how to design and control the tooltips. # Prepare hover text and formatting label.template &lt;- paste(&#39;County, State: %{text}&lt;br&gt;&#39;, &#39;Date: %{x}&lt;br&gt;&#39;, &#39;Infected Cases: %{y}&#39;) # Start plotly from here plot_ly() %&gt;% # add Cook County’s time series using mode: lines+markers add_trace(data = county.top10.long %&gt;% filter(wday(Date) == 1 &amp; type == &#39;Observed&#39; &amp; County == &#39;Cook&#39;), x = ~Date, y = ~Count, type = &#39;scatter&#39;, mode = &#39;lines+markers&#39;, showlegend = TRUE, name = &#39;mode:lines+markers&#39;, text = &#39;Cook, Illinois&#39;, hovertemplate = label.template) 5.3.5 Multiple time series plots Using different options in the mode argument Figure 5.9 shows different types of time series plots for the cumulative infected count for three counties by changing the mode argument. # Start plotly from here plot_ly() %&gt;% # add Cook County’s time series using mode: lines+markers add_trace(data = county.top10.long %&gt;% filter(wday(Date) == 1 &amp; type == &#39;Observed&#39; &amp; County == &#39;Cook&#39;), x = ~Date, y = ~Count, type = &#39;scatter&#39;, mode = &#39;lines+markers&#39;, showlegend = TRUE, name = &#39;mode:lines+markers&#39;, text = &#39;Cook, Illinois&#39;, hovertemplate = label.template) %&gt;% # add LosAngeles county’s time series using mode: lines add_trace(data = county.top10.long %&gt;% filter(wday(Date) == 1 &amp; type == &#39;Observed&#39; &amp; County == &#39;LosAngeles&#39;), x = ~Date, y = ~Count, type = &#39;scatter&#39;, mode = &#39;lines&#39;, showlegend = TRUE, name = &#39;mode:lines&#39;, text = &#39;Los Angeles, California&#39;, hovertemplate = label.template) %&gt;% # add Miami-Dada county’s time series using mode: markers add_trace(data = county.top10.long %&gt;% filter(wday(Date) == 1 &amp; type == &#39;Observed&#39; &amp; County == &#39;Miami-Dade&#39;), x = ~Date, y = ~Count, type = &#39;scatter&#39;, mode = &#39;markers&#39;, showlegend = TRUE, name = &#39;mode:markers&#39;, text = &#39;Miami-Dade, Florida&#39;, hovertemplate = label.template) Figure 5.9: Time series plot of the cumulative infected count for three counties. Mapping the value of a variable to color plot_ly() %&gt;% add_trace(data = county.top10.long %&gt;% filter(wday(Date) == 1 &amp; type == &#39;Observed&#39;), x = ~Date, y = ~Count, type = &#39;scatter&#39;, mode = &#39;lines+markers&#39;, color = ~County, showlegend = TRUE) Controlling the color scale We can use the colors argument to control the color scale: “colorbrewer2.org” palette name (e.g., “YlOrRd” or &quot;Blues”); a vector of colors to interpolate in hexadecimal “#RRGGBB” format; a color interpolation function like colorRamp(). For example, you can define your own color palette: mycol &lt;- c(&quot;#5B1A18&quot;, &quot;#F21A00&quot;, &quot;#D67236&quot;, &quot;#F1BB7B&quot;, &quot;#D8B70A&quot;, &quot;#A2A475&quot;, &quot;#81A88D&quot;, &quot;#78B7C5&quot;, &quot;#3B9AB2&quot;, &quot;#7294D4&quot;, &quot;#C6CDF7&quot;, &quot;#E6A0C4&quot;) plot_ly() %&gt;% add_trace(data = county.top10.long %&gt;% filter(wday(Date) == 1 &amp; type == &#39;Observed&#39;), x = ~Date, y = ~Count, type = &#39;scatter&#39;, mode = &#39;lines+markers&#39;, color = ~factor(County), colors = mycol, showlegend = TRUE) 5.3.6 More features about the lines We can also alter the thickness of the lines in your time series plot, and make them dashed or dotted using default types or self-defined method. In the following code, we change the line type by the value of variable type by linetype = ~type. plot_ly() %&gt;% add_trace(data = county.top10.long %&gt;% filter(County == &#39;Cook&#39;), x = ~Date, y = ~Count, type = &#39;scatter&#39;, mode = &#39;lines&#39;, linetype = ~type, showlegend = TRUE, text = &#39;Cook, Illinois&#39;, hovertemplate = label.template) 5.3.7 Add ribbons You can use the add_ribbons() function to draw a filled area plot, for example, the confidence band or prediction intervals. Its main arguments are: * data: the data * x: x values * ymin: the lower bound of the ribbon * ymax: the upper bound of the ribbon The following code adds the 80% prediction intervals for the cumulative infected cases for Cook County, Illinois. plot_ly(data = county.top10.long %&gt;% filter(County == &#39;Cook&#39;)) %&gt;% add_trace(x = ~Date, y = ~Count, type = &#39;scatter&#39;, mode = &#39;lines&#39;, linetype = ~type, showlegend = TRUE, text = &#39;Cook, Illinois&#39;, hovertemplate = label.template) %&gt;% add_ribbons(x = ~Date, ymin = ~Count_lb, ymax = ~Count_ub, color = I(&quot;#74A089&quot;), opacity = 0.75, name = &quot;80% prediction intervals&quot;) 5.4 Pie Charts We can also make pie charts in R using plotly using the function add_pie. To draw the pie chart, we upload the features.state from the slid R package, and the dataset contains four variables: State, Region, Division and pop. We are interested in the composition of the population in each region. Figure 5.10: A simple pie chart for population in different regions. Next, we are interested in finding the composition of the cumulative infected/death cases in each region using add_pie. We can create pie chart subplots by using the domain attribute. It is important to note that the x array sets the horizontal position while the y array sets the vertical. For example, x=[0,0.5], y=[0, 0.5] mean the bottom left position of the plot. Figure 5.11: Pie charts with subplots: left plot is for infected count, and right plot is for the death count. 5.5 Animation Animated plots are a great way to display the dynamics of the underlying data. Both plot_ly() and ggplotly() support keyframe animations through the frame argument/aesthetic. They also support an ids argument/aesthetic to ensure smooth transitions between objects with the same id. This chapter provides a walk-through for creating an animated time series using the plotly R package. 5.5.1 An animation of the evolution of infected vs. death count Figure 5.12 creates an animation of the evolution in the relationship between the state-level logarithm of cumulative infected count and the logarithm of cumulative death count evolved over time in December of 2020. The data state.long from slid package is recorded on a daily basis. Below, we first prepare the data: #install_github(&#39;covid19-dashboard-us/slid&#39;) library(slid) data(state.long) state.long.DEC &lt;- state.long %&gt;% dplyr::filter(DATE &gt; as.Date(&quot;2020-11-30&quot;)) %&gt;% mutate(log.Infected = log(Infected + 1)) %&gt;% mutate(log.Death = log(Death + 1)) Next, we load the required packages. Animations can be created by either using the frame argument in plot_ly() or the frame ggplot2 aesthetic in ggplotly(). Animated plots can be generated with the frame = and ids = arguments in the geom_point() function. In this case, the data state.long is recorded on a daily basis, so we will assign the DATE variable to frame; each point in the scatterplot represents a state, so we will assign the State variable to ids, which ensures a smooth transition from date to date for the 48 mainland states and District of Columbia in the US: gg &lt;- ggplot(state.long.DEC, aes(log.Infected, log.Death, color = State)) + geom_point(aes(size = pop, frame = as.numeric(DATE), ids = State)) ggplotly(gg) Figure 5.12: Your first animated plot between logarithms of the death count and infected count. As long as frame = is provided, an animation is produced with play/pause button(s) and a slider component for controlling the animation. By default, animations populate a play button and slider component for controlling the state of the animation. You can pause an animation by clicking on a relevant location on the slider bar. These components can be removed or customized via the animation_button() and animation_slider() functions. You can control the play button and slider component transition between frames according to rules specified by animation_opts(). Moreover, various animation options, like the amount of time between frames, the smooth transition duration, and the type of transition easing may be altered via the animation_opts() function, too. Here are some animation configuration options in the function animation_opts(): p: a plotly object; frame: the amount of time between frames; transition = 500 frame: the duration of the smooth transition between frames; easing = &quot;linear&quot;: the type of transition easing; redraw = TRUE: trigger a redraw of the plot at the completion of the transition or not; mode = &quot;immediate&quot;: describe how a new animate call interacts with currently-running animations. Figure 5.13 illustrates the same plots as Figure 5.12, but doubles the amount of time between frames, uses linear transition easing, places the animation buttons closer to the slider, and modifies the default currentvalue.prefix settings for the slider. base &lt;- state.long.DEC %&gt;% plot_ly(x = ~log.Infected, y = ~log.Death, size = ~pop, text = ~State, hoverinfo = &quot;text&quot;) %&gt;% layout(xaxis = list(type = &quot;log&quot;)) anim1 &lt;- base %&gt;% add_markers(color = ~State, frame = ~DATE, ids = ~State) %&gt;% animation_opts(1000, easing = &quot;elastic&quot;, redraw = FALSE) %&gt;% animation_button( x = 1, xanchor = &quot;right&quot;, y = 0, yanchor = &quot;bottom&quot; ) %&gt;% animation_slider( currentvalue = list(type = &quot;date&quot;, font = list(color=&quot;red&quot;)) ) anim1 Figure 5.13: Modifying animation defaults with animation_opts(), animation_button(), and animation_slider(). 5.5.2 An animation of the state-level time series plot of infected count We now would like to show the state-level time series plot of the infected count. We then show the animation by Region. Since there is no meaningful relationship between objects in different frames of Figure 5.14, the smooth transition duration is set to 0. This helps avoid any confusion that there is a meaningful connection between the smooth transitions. Note that these options control both animations triggered by the play button or via the slider. mycol &lt;- c(&quot;#5B1A18&quot;, &quot;#F21A00&quot;, &quot;#D67236&quot;, &quot;#F1BB7B&quot;, &quot;#D8B70A&quot;, &quot;#A2A475&quot;, &quot;#81A88D&quot;, &quot;#78B7C5&quot;, &quot;#3B9AB2&quot;, &quot;#7294D4&quot;, &quot;#C6CDF7&quot;, &quot;#E6A0C4&quot;) base &lt;- state.long %&gt;% mutate(log.Infected = log(Infected + 1)) %&gt;% plot_ly(x = ~DATE, y = ~log.Infected, frame = ~Region, text = ~State, hoverinfo = &quot;text&quot;) %&gt;% add_lines(color = ~factor(State), colors = mycol, showlegend = FALSE) anim2 &lt;- base %&gt;% layout(xaxis = list(type = &quot;date&quot;, range=c(&#39;2020-01-22&#39;, &#39;2020-12-11&#39;))) %&gt;% animation_opts(1000, easing = &quot;elastic&quot;, redraw = FALSE, transition = 0) anim2 Figure 5.14: Animation of time series plot of infected count by region. 5.6 Saving HTML After polishing the figure, we need to save the figure and animation for later use. We can save any widget made from any htmlwidgets package (e.g., plotly, leaflet, DT, etc) as a standalone HTML file via the saveWidget() function. By default, it produces a completely self-contained HTML file, and all the necessary JavaScript and CSS dependency files are bundled inside the HTML file. 5.6.1 Save as a standalone HTML file # Save plotly object into a standalone html file library(htmlwidgets) saveWidget(fig1, &quot;pie1.html&quot;, selfcontained = T) saveWidget(anim1, &quot;anim1.html&quot;, selfcontained = T) 5.6.2 Save as non-selfcontained HTML file Sometimes, you may want to embed numerous widgets in a larger HTML document and save all the dependency files externally into a single directory. You can do this by setting selfcontained = FALSE and specifying a fixed libdir in saveWidget(). # Save plotly object into a non-selfcontained html file library(htmlwidgets) saveWidget(fig2, &quot;pie2.html&quot;, selfcontained = F, libdir = &quot;lib&quot;) saveWidget(anim2, &quot;anim2.html&quot;, selfcontained = F, libdir = &quot;lib&quot;) 5.7 Exercises We will explore the basic functions of plot_ly using state.long. Install the Github R package slid. library(slid) data(state.long) Create a bar graph for the top ten states with the largest new number of infected cases on December 11, 2020. Create a time series plot for the logarithm of the cumulative infected cases for Iowa. Create a time series plot for the logarithm of the cumulative infected cases for the top ten states with the largest new number of infected cases on December 11, 2020. Create a pie chart for the daily new infected cases on December 11, 2020, for different regions. Save the above plots as an HTML file, and save all the dependency files externally into a single directory using htmlwidgets::saveWidget() with selfcontained = FALSE. Redraw the above plots for the death count using the ggplotly() function. During the COVID-19 pandemic, we are interested in how many tests are coming back positive. The state.long data set comprises state-level cumulative tests. We want to create an animation to demonstrate the weekly test positivity rate for each state based on a 7-day moving average. It is calculated by dividing the state's new positive counts in the past seven days by the state's new tests in the past seven days. The PosTest.state.rda and Test.state.rda are the daily reported positive test and daily total test data collected from COVIDTracking Project, and it can be downloaded from the Github slid R package. Load the the datasets to your working directory: library(slid) data(Test.state) data(PosTest.state) change them from the wide form to the long form, and combine them into one dataset. Add a new column of the weekly test positivity rate. Create an animated time series plot for Iowa's weekly test positivity rate in the past month (30 days) starting from December 1 to December 11, 2020. For example, if I pause on December 7, it should show a time series of Iowa's weekly test positivity rate from November 8 to December 7. Save your animation in part c as a standalone HTML file and a non-selfcontained HTML file. References "]]
